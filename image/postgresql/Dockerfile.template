# multi-stage builder
FROM debian:{{ .debian }} AS builder

RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list; \
    sed -i 's/security.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list; \
	apt update; \
	mkdir -p /usr/src/postgresql

ADD postgresql /usr/src/postgresql/

RUN apt install -y --no-install-recommends \
		git \
		pax-utils \
		gosu \
		bison \
		flex \
		gcc \
		g++ \
		llvm-dev \
		clang \
		libicu-dev \
		dpkg \
		dpkg-dev \
		pkg-config \
		python3-dev \
		libreadline-dev \
		libldap2-dev \
		libxml2-dev \
		libgss-dev \
		openssl \
		libssl-dev \
		libxslt-dev \
		uuid-dev \
		tcl-dev \
		liblz4-dev \
		libperl-dev \
		libkrb5-dev \
		libcurl4-openssl-dev \
		libzstd-dev \
		automake \
		autoconf \
		libtool \
		libgeos-dev \
		proj-bin \
		libproj-dev \
		libprotobuf-c-dev \
		protobuf-c-compiler \
		gdal-bin \
		libgdal-dev \
		python3 \
		python3-pip \
		libboost-dev \
		cmake \
		xsltproc
#{{ if env.arch == "aarch64"  then ( -}}
#        ""
#{{ ) else "" end -}}

RUN	cd /usr/src/postgresql; \
#	git reset --hard; \
	git checkout {{ .tag[env.index | tonumber] }}; \
#	git clean -fqdx; \
	awk '$1 == "#define" && $2 == "DEFAULT_PGSOCKET_DIR" && $3 == "\"/tmp\"" { $3 = "\"/var/run/postgresql\""; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; \
	grep '/var/run/postgresql' src/include/pg_config_manual.h.new; \
	mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; \
	./configure \
		--prefix=/var/lib/postgresql/ \
		--with-icu \
		--with-tcl \
		--with-perl \
		--with-python \
		--with-gssapi \
		--with-ldap \
		--with-openssl \
		--with-libxml \
		--with-libxslt \
		--with-readline \
		--with-uuid=e2fs \
		--with-llvm \
		--with-libraries=/usr/local/lib \
		--with-krb5 \
{{ if .major >= 14 then ( -}}
		--with-lz4 \
{{ ) else "" end -}}
	>/dev/null; \
	make -j `expr $(nproc) - 2` >/dev/null; \
	make install; \
	make -C contrib install; \
	echo "huge_pages=off" >> /var/lib/postgresql/share/postgresql.conf.sample;


ADD pg_auto_failover /usr/src/pg_auto_failover
RUN	cd /usr/src/pg_auto_failover; \
	git checkout {{ .failover }}; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD pg_dirtyread /usr/src/pg_dirtyread
RUN	cd /usr/src/pg_dirtyread; \
	git checkout {{ .dirtyread }}; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD citus /usr/src/citus
RUN	cd /usr/src/citus; \
	git checkout {{ .citus }}; \
	PG_CONFIG=/var/lib/postgresql/bin/pg_config ./configure ; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD postgis /usr/src/postgis
RUN	cd /usr/src/postgis; \
	git checkout {{ .postgis }}; \
	PG_CONFIG=/var/lib/postgresql/bin/pg_config ./autogen.sh ; \
	PG_CONFIG=/var/lib/postgresql/bin/pg_config ./configure ; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD pgaudit /usr/src/pgaudit
RUN cd /usr/src/pgaudit; \
	git checkout {{ .pgaudit }}; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install USE_PGXS=1 PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD postgres-aws-s3 /usr/src/postgres-aws-s3
RUN cd /usr/src/postgres-aws-s3; \
	git checkout {{ .postgres_aws_s3 }}; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD barman /usr/src/barman
RUN python3 -m pip install --trusted-host mirrors.aliyun.com psycopg2-binary -i http://mirrors.aliyun.com/pypi/simple/; \
	cd /usr/src/barman; \
	git checkout {{ .barman }}; \
	echo '' >> setup.cfg; \
	echo '[easy_install]' >> setup.cfg; \
	echo 'index_url = http://mirrors.aliyun.com/pypi/simple/' >> setup.cfg; \
	python3 setup.py build; \
	python3 setup.py install --home=/var/lib/postgresql/barman --install-lib=/var/lib/postgresql/barman/lib;

ADD pgvector /usr/src/pgvector
RUN	cd /usr/src/pgvector; \
	git checkout {{ .pgvector }}; \
	make PG_CONFIG=/var/lib/postgresql/bin/pg_config -j `expr $(nproc) - 2` >/dev/null; \
	make install PG_CONFIG=/var/lib/postgresql/bin/pg_config;

ADD pgrouting /usr/src/pgrouting
RUN	cd /usr/src/pgrouting; \
	git checkout {{ .pgrouting }}; \
	mkdir build; \
	cd build; \
	export PATH=/var/lib/postgresql/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; \
	cmake -LA  ..; \
	make -j `expr $(nproc) - 2` >/dev/null; \
	make install ;

RUN cd /var/lib/postgresql; \
		tar czhvf lib.tar.gz `find . -type f | xargs ldd 2>/dev/null | grep "=>" | cut -d ">" -f 2 | cut -d "(" -f 1 | sort -u`
	
# real image
FROM debian:{{ .debian }}

ENV LANG en_US.utf8
ENV TZ=Asia/Shanghai
ENV DATA /var/lib/postgresql/data
ENV AWS_DATA_PATH $DATA/.aws
ENV AWS_CONFIG_FILE $AWS_DATA_PATH/config
ENV AWS_SHARED_CREDENTIALS_FILE $AWS_DATA_PATH/credentials
ENV XDG_CONFIG_HOME /var/lib/postgresql/data/auto_failover
ENV XDG_DATA_HOME /var/lib/postgresql/data/auto_failover
ENV ASSIST /var/lib/postgresql/data/assist
ENV PGPASSFILE /var/lib/postgresql/data/assist/pgpassfile
ENV PATH /var/lib/postgresql/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV PGHOME /var/lib/postgresql
VOLUME /var/lib/postgresql/data

COPY --from=builder /var/lib/postgresql/ /var/lib/postgresql
COPY docker-entrypoint.sh /usr/local/bin/
COPY pgtools /usr/local/bin/
COPY config/barman/barman.conf /etc/

RUN set -eux; \
	groupadd -r postgres --gid=999; \
	useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \
	echo 'export PATH=$PATH:/var/lib/postgresql/bin' >> /etc/profile; \
	tar --skip-old-files -xzf /var/lib/postgresql/lib.tar.gz -C /; \
	rm -rf /var/lib/postgresql/lib.tar.gz; \
	mkdir -p "$DATA" && mkdir -p "$ASSIST" && chown -R postgres:postgres /var/lib/postgresql && chmod 777 "$DATA"; \
	mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 775 /var/run/postgresql ; \
    sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list; \
    sed -i 's/security.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list; \
	apt update; \
	apt install -y --no-install-recommends vim sysstat inetutils-ping procps net-tools ssh sshpass curl ; \
	apt install -y --no-install-recommends gosu locales ; \
	localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 ; \
	apt install -y  --no-install-recommends python3 python3-pip rsync; \
	python3 -m pip install --trusted-host mirrors.aliyun.com --no-cache-dir \
			setuptools==45.2.0 boto3 awscli python-snappy \
			-i http://mirrors.aliyun.com/pypi/simple/; \
	python3 -m easy_install --no-deps /var/lib/postgresql/barman/lib/*; \
	apt-get purge -y python3-pip; \
	apt-get clean; \
	rm -rf /var/lib/apt/lists/*; \
	rm -rf /var/lib/postgresql/barman; \
	apt-get purge -y --auto-remove ; \
	echo "* soft    nofile  1024000" >> /etc/security/limits.conf; \
	echo "* hard    nofile  1024000" >> /etc/security/limits.conf; \
	echo "* soft    nproc   unlimited" >> /etc/security/limits.conf; \
	echo "* hard    nproc   unlimited" >> /etc/security/limits.conf; \
	echo "* soft    core    unlimited" >> /etc/security/limits.conf; \
	echo "* hard    core    unlimited" >> /etc/security/limits.conf; \
	echo "* soft    memlock unlimited" >> /etc/security/limits.conf; \
	echo "* hard    memlock unlimited" >> /etc/security/limits.conf; \
	/var/lib/postgresql/bin/postgres --version

ENTRYPOINT ["docker-entrypoint.sh"]
STOPSIGNAL SIGINT
EXPOSE 5432
CMD ["postgres"]
